{"version":3,"sources":["components/Counter.js","components/FetchData.js","components/Home.js","components/NavMenu.js","components/Layout.js","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["Counter","props","state","currentCount","incrementCounter","bind","this","setState","aria-live","className","onClick","Component","displayName","name","FetchData","forecasts","loading","populateWeatherData","contents","renderForecastsTable","id","fetch","response","json","data","aria-labelledby","map","forecast","key","date","temperatureC","temperatureF","summary","Home","href","NavMenu","toggleNavbar","collapsed","Navbar","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","Collapse","isOpen","navbar","NavItem","NavLink","Layout","children","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","undefined","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.40b92226.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport class Counter extends Component {\n  static displayName = Counter.name;\n\n  constructor(props) {\n    super(props);\n    this.state = { currentCount: 0 };\n    this.incrementCounter = this.incrementCounter.bind(this);\n  }\n\n  incrementCounter() {\n    this.setState({\n      currentCount: this.state.currentCount + 1\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Counter</h1>\n\n        <p>This is a simple example of a React component.</p>\n\n        <p aria-live=\"polite\">Current count: <strong>{this.state.currentCount}</strong></p>\n\n        <button className=\"btn btn-primary\" onClick={this.incrementCounter}>Increment</button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport class FetchData extends Component {\n  static displayName = FetchData.name;\n\n  constructor(props) {\n    super(props);\n    this.state = { forecasts: [], loading: true };\n  }\n\n  componentDidMount() {\n    this.populateWeatherData();\n  }\n\n  static renderForecastsTable(forecasts) {\n    return (\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Temp. (C)</th>\n            <th>Temp. (F)</th>\n            <th>Summary</th>\n          </tr>\n        </thead>\n        <tbody>\n          {forecasts.map(forecast =>\n            <tr key={forecast.date}>\n              <td>{forecast.date}</td>\n              <td>{forecast.temperatureC}</td>\n              <td>{forecast.temperatureF}</td>\n              <td>{forecast.summary}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    let contents = this.state.loading\n      ? <p><em>Loading...</em></p>\n      : FetchData.renderForecastsTable(this.state.forecasts);\n\n    return (\n      <div>\n        <h1 id=\"tabelLabel\" >Weather forecast</h1>\n        <p>This component demonstrates fetching data from the server.</p>\n        {contents}\n      </div>\n    );\n  }\n\n  async populateWeatherData() {\n    const response = await fetch('weatherforecast');\n    const data = await response.json();\n    this.setState({ forecasts: data, loading: false });\n  }\n}\n","import React, { Component } from 'react';\n\nexport class Home extends Component {\n  static displayName = Home.name;\n\n  render () {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <p> Welcome to your new single-page application, built with:</p>\n        <ul>\n          <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\n          <li><a href='https://facebook.github.io/react/'>React</a> for client-side code</li>\n          <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\n        </ul>\n        <p>To help you get started, we have also set up:</p>\n        <ul>\n          <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\n          <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\n          <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\n        </ul>\n        <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport './NavMenu.css';\n\nexport class NavMenu extends Component {\n  static displayName = NavMenu.name;\n\n  constructor (props) {\n    super(props);\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n    this.state = {\n      collapsed:  true\n    };\n  }\n\n  toggleNavbar () {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  render () {\n    return (\n      <header>\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\n          <Container>\n            <NavbarBrand tag={Link} to=\"/\">lib_manager</NavbarBrand>\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\n              <ul className=\"navbar-nav flex-grow\">\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/counter\">Counter</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Fetch data</NavLink>\n                </NavItem>\n              </ul>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport { NavMenu } from './NavMenu';\n\nexport class Layout extends Component {\n  static displayName = Layout.name;\n\n  render () {\n    return (\n      <div>\n        <NavMenu />\n        <Container>\n          {this.props.children}\n        </Container>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Route } from 'react-router';\nimport { Counter } from './components/Counter';\nimport { FetchData } from './components/FetchData';\nimport { Home } from './components/Home';\nimport { Layout } from './components/Layout';\n\n\nexport const App: React.FC = () => {\n    return (\n      <Layout>\n        <Route exact path='/' component={Home} />\n        <Route path='/counter' component={Counter} />\n        <Route path='/fetch-data' component={FetchData} />\n      </Layout>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport default function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log('This web app is being served cache-first by a service worker. To learn more, visit https://cra.link/PWA');\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://cra.link/PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It is the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <BrowserRouter basename={baseUrl ?? undefined}>\n    <App />\n  </BrowserRouter>,\n  rootElement);\n\nregisterServiceWorker();\n\n"],"sourceRoot":""}